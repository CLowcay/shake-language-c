#!/usr/bin/env runhaskell
-- Copyright 2013-2014 Samplecount S.L.
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

import           Control.Applicative
import           Control.Monad
import           Data.Char (toLower)
import qualified Data.List as List
import qualified Distribution.PackageDescription as Dist
import qualified Distribution.PackageDescription.Configuration as Dist
import qualified Distribution.PackageDescription.Parse as Dist
import qualified Distribution.Verbosity as Dist
import           GHC.Conc (getNumProcessors)
import qualified System.Directory as Dir
import qualified System.Environment as Env
import           System.Exit (ExitCode(..), exitFailure)
import           System.FilePath
import           System.IO (hPutStr, hPutStrLn, stderr, stdout)
import           System.Process (readProcessWithExitCode, rawSystem)

-- Cabal configuration fields:

configFieldPackageDirs :: String
configFieldPackageDirs = "x-stir-package-dirs"

execError :: FilePath -> Int -> IO ()
execError path code = error $ takeFileName path ++ " failed with exit code " ++ show code

-- Not yet in process-1.1
callProcess :: String -> [String] -> IO ()
callProcess path args = do
  -- print $ [path] ++ args
  exitCode <- rawSystem path args
  case exitCode of
    ExitSuccess -> return ()
    ExitFailure code -> execError path code

-- Ignore exit code
callProcess_ :: String -> [String] -> IO ()
callProcess_ path args = do
  _ <- rawSystem path args
  return ()

findExecutable :: String -> IO FilePath
findExecutable exe = maybe (error $ exe ++ " executable not found") id
                        <$> Dir.findExecutable exe

getCabalFile :: IO (FilePath, Dist.PackageDescription)
getCabalFile = do
  cabalFiles <- filter (List.isSuffixOf ".cabal")
                  <$> Dir.getDirectoryContents "."
  case cabalFiles of
    [] -> error "No cabal file found"
    (_:_:_) -> error $ "Multiple cabal files found: " ++ List.intercalate ", " cabalFiles
    [cabalFile] -> do
        pkg <- Dist.flattenPackageDescription
                <$> Dist.readPackageDescription Dist.silent cabalFile
        return (cabalFile, pkg)

getBuildCommand :: FilePath -> Dist.PackageDescription -> IO FilePath
getBuildCommand cabalFile pkg =
  case Dist.executables pkg of
    [] -> error $ "No executables found in " ++ cabalFile
    (spec:rest) -> do
      let exe = Dist.exeName spec
      when (not (null rest)) $
        hPutStrLn stderr $ "Multiple executables found in " ++ cabalFile ++ ", using " ++ exe
      return $ "dist" </> "build" </> exe </> exe

buildCommandPath :: String -> FilePath
buildCommandPath exe = "dist" </> "build" </> exe </> exe

configPackageDirs :: [(String, String)] -> [FilePath]
configPackageDirs = maybe [] id
                  . fmap lines
                  . lookup configFieldPackageDirs

hasSandbox :: IO Bool
hasSandbox = Dir.doesDirectoryExist ".cabal-sandbox"

main :: IO ()
main = do
  (cabalFile, pkg) <- getCabalFile
  let config = Dist.customFieldsPD pkg

  cabal <- findExecutable "cabal"
  progName <- Env.getProgName
  args <- Env.getArgs

  let initialize = do
        callProcess cabal ["sandbox", "init"]
        mapM_ (\dir -> callProcess cabal ["sandbox", "add-source", dir])
              (configPackageDirs config)
      update = do
        hasSandbox' <- hasSandbox
        unless hasSandbox' initialize
        ncpu <- getNumProcessors
        let j = "-j" ++ show ncpu
        callProcess cabal [
            "install"
            -- These might be defined in the user's cabal config file and effectively double compilation times
          , "--disable-library-profiling"
          , "--disable-executable-profiling"
          , "--only-dependencies"
          , "--force-reinstalls"
          , j
          ]
        -- When the public interface of package dependencies changes, the local package needs to be reconfigured.
        (exitCode, out1, out2) <- readProcessWithExitCode cabal ["build", j] ""
        -- First output stderr
        hPutStr stderr out2
        hPutStr stdout out1
        case exitCode of
          ExitSuccess -> return ()
          ExitFailure code -> do
            if any (List.isInfixOf "cannot satisfy -package-id") $ lines out1 ++ lines out2
            then callProcess cabal ["configure"] >> callProcess cabal ["build", j]
            else execError cabal code

  case args of
    ("init":_) -> do
      -- Initialize sandbox
      initialize
    ("update":_) -> do
      -- Update build command
      update
    ("scrub":_) -> do
      -- Clean everything
      exe <- getBuildCommand cabalFile pkg
      exeExists <- Dir.doesFileExist exe
      when exeExists $ callProcess_ exe ["clean"]
      distExist <- Dir.doesDirectoryExist "dist"
      when distExist $
        Dir.removeDirectoryRecursive "dist"
      hasSandbox' <- hasSandbox
      when hasSandbox' $
        callProcess cabal ["sandbox", "delete"]
    args -> do
      -- Call build command with arguments
      exe <- getBuildCommand cabalFile pkg
      exeExists <- Dir.doesFileExist exe
      unless exeExists $ update
      callProcess exe args
